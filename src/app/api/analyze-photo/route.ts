import { NextRequest, NextResponse } from 'next/server'
import { openai } from '@/lib/openai'

export async function POST(request: NextRequest) {
  try {
    console.log('üîç INICIANDO AN√ÅLISE DA FOTO...')
    
    const { imageUrl, photoType } = await request.json()
    console.log('üì∏ Dados recebidos:', { photoType, imageUrlLength: imageUrl?.length })

    if (!imageUrl) {
      console.log('‚ùå URL da imagem √© obrigat√≥ria')
      return NextResponse.json(
        { error: 'URL da imagem √© obrigat√≥ria' },
        { status: 400 }
      )
    }

    console.log('üîë Verificando API key...')
    const apiKey = process.env.OPENAI_API_KEY
    if (!apiKey) {
      console.log('‚ùå OPENAI_API_KEY n√£o encontrada')
      return NextResponse.json(
        { error: 'API key n√£o configurada' },
        { status: 500 }
      )
    }
    console.log('‚úÖ API key encontrada')

    // Prompt espec√≠fico baseado no tipo de foto
    const systemPrompt = photoType === 'INITIAL' 
      ? `Voc√™ √© um especialista em an√°lise de fotos de lanches e refei√ß√µes. Analise a foto e identifique TODOS os itens de comida que voc√™ consegue ver.

ITENS PARA DETECTAR (lista n√£o limitativa):
- P√£es: p√£o, hamb√∫rguer, sandu√≠che, hot dog, baguette, p√£o de queijo, etc.
- Carnes: hamb√∫rguer, frango, peixe, carne bovina, porco, lingui√ßa, salsicha, etc.
- Vegetais: alface, tomate, cebola, pepino, cenoura, milho, ervilha, etc.
- Queijos: queijo, queijo ralado, queijo cremoso, etc.
- Tub√©rculos: batata, batata doce, mandioca, etc.
- Massas: macarr√£o, lasanha, pizza, etc.
- Arroz e feij√£o
- Molhos: ketchup, mostarda, maionese, molho de tomate, etc.
- Ovos: frito, cozido, omelete, etc.
- Frutas: banana, ma√ß√£, laranja, etc.
- Doces: sobremesas, bolos, sorvetes, etc.
- Bebidas: refrigerante, suco, √°gua, etc.
- E QUALQUER OUTRO ITEM DE COMIDA que voc√™ conseguir identificar

INSTRU√á√ïES:
1. Analise a foto cuidadosamente
2. Liste TODOS os itens de comida que voc√™ consegue identificar claramente
3. Para cada item, indique a quantidade:
   - SIMPLE: quantidade normal (1 ponto)
   - DUPLO: quantidade maior que o normal (2 pontos)
   - TRIPLO: quantidade muito maior que o normal (3 pontos)

RESPONDA APENAS NO FORMATO JSON:
{
  "items": [
    {
      "name": "nome_do_item",
      "quantity": "SIMPLE|DUPLO|TRIPLO"
    }
  ]
}

Se n√£o conseguir identificar nenhum item claramente, retorne um array vazio.`
      : `Voc√™ √© um especialista em an√°lise de limpeza de pratos ap√≥s refei√ß√µes. Analise a foto do prato e avalie o n√≠vel de limpeza.

INSTRU√á√ïES:
1. Analise a foto do prato cuidadosamente
2. Avalie quantos res√≠duos de comida ainda est√£o vis√≠veis
3. Determine o n√≠vel de limpeza:
   - SIMPLE: prato limpo, poucos res√≠duos (1 ponto)
   - DUPLO: prato bem limpo, muito poucos res√≠duos (2 pontos)
   - TRIPLO: prato muito limpo, praticamente sem res√≠duos (3 pontos)
   - Se o prato estiver muito sujo, n√£o retorne nenhum item

RESPONDA APENAS NO FORMATO JSON:
{
  "items": [
    {
      "name": "Limpeza",
      "quantity": "SIMPLE|DUPLO|TRIPLO"
    }
  ]
}

Se o prato estiver muito sujo ou n√£o conseguir avaliar a limpeza, retorne um array vazio.`

    const userPrompt = photoType === 'INITIAL'
      ? 'Analise esta foto da refei√ß√£o/lanche. Identifique TODOS os itens de comida vis√≠veis, incluindo ingredientes, acompanhamentos, bebidas e qualquer outro alimento que voc√™ conseguir detectar.'
      : 'Analise esta foto do prato ap√≥s a refei√ß√£o. Avalie cuidadosamente a limpeza do prato, considerando quantos res√≠duos de comida ainda est√£o vis√≠veis. Quanto mais limpo o prato, melhor a pontua√ß√£o.'

    console.log('ü§ñ CHAMANDO OPENAI...')
    console.log('Modelo:', "gpt-4o-mini")
    console.log('URL da imagem:', imageUrl.substring(0, 100) + '...')

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: userPrompt
            },
            {
              type: "image_url",
              image_url: {
                url: imageUrl
              }
            }
          ]
        }
      ],
      max_tokens: 500,
    })

    console.log('‚úÖ RESPOSTA RECEBIDA DA OPENAI')
    const content = response.choices[0]?.message?.content
    if (!content) {
      console.log('‚ùå Resposta vazia da OpenAI')
      throw new Error('Resposta vazia da OpenAI')
    }

    console.log('ü§ñ RESPOSTA DA IA:')
    console.log('Raw response:', content)

    // Tentar fazer parse do JSON da resposta
    let detectedItems = []
    try {
      // Limpar a resposta de markdown se necess√°rio
      let cleanContent = content.trim()
      
      // Se a resposta come√ßa com ```json, remover o markdown
      if (cleanContent.startsWith('```json')) {
        cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '')
      }
      // Se a resposta come√ßa com ```, remover o markdown
      else if (cleanContent.startsWith('```')) {
        cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '')
      }
      
      console.log('üßπ Conte√∫do limpo:', cleanContent)
      
      const parsed = JSON.parse(cleanContent)
      detectedItems = parsed.items || []
      console.log('‚úÖ Itens detectados pela IA:')
      detectedItems.forEach((item: any, index: number) => {
        console.log(`  ${index + 1}. ${item.name} - ${item.quantity}`)
      })
    } catch (error) {
      console.error('‚ùå Erro ao fazer parse da resposta:', content)
      console.error('Erro:', error)
      // Fallback: tentar extrair informa√ß√µes do texto
      detectedItems = []
    }

    console.log('üìä Total de itens detectados:', detectedItems.length)

    return NextResponse.json({
      success: true,
      items: detectedItems,
      rawResponse: content
    })

  } catch (error) {
    console.error('üí• ERRO NA AN√ÅLISE DA FOTO:', error)
    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace')
    return NextResponse.json(
      { error: 'Erro ao analisar a foto', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
} 